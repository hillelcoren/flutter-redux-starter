import 'dart:async';
import 'dart:core';
import 'dart:convert';
import 'package:built_collection/built_collection.dart';
import 'package:flutterreduxrad/data/models/models.dart';
import 'package:flutterreduxrad/data/models/serializers.dart';
import 'package:flutterreduxrad/redux/auth/auth_state.dart';
import 'package:flutterreduxrad/data/models/stub_model.dart';
import 'package:flutterreduxrad/data/web_client.dart';
import 'package:flutterreduxrad/constants.dart';

class StubRepository {
  final WebClient webClient;

  const StubRepository({
    this.webClient = const WebClient(),
  });

  Future<BuiltList<StubEntity>> loadList(AuthState auth) async {
    final response = await webClient.get(kApiUrl + '/stubs');

    var list = new BuiltList<StubEntity>(response.map((stub) {
      return serializers.deserializeWith(StubEntity.serializer, stub);
    }));

    return list;
  }

  Future saveData(AuthState auth, StubEntity stub, [EntityAction action]) async {

    var data = serializers.serializeWith(StubEntity.serializer, stub);
    var response;

    if (stub.isNew) {
      response = await webClient.post(
          kApiUrl + '/stubs', json.encode(data));
    } else {
      var url = kApiUrl + '/stubs/' + stub.id.toString();
      response = await webClient.put(url, json.encode(data));
    }

    return serializers.deserializeWith(StubEntity.serializer, response);
  }
}