import 'package:redux/redux.dart';
import 'package:flutterreduxrad/data/models/stub_model.dart';
import 'package:flutterreduxrad/redux/ui/entity_ui_state.dart';
import 'package:flutterreduxrad/redux/ui/list_ui_state.dart';
import 'package:flutterreduxrad/redux/stub/stub_actions.dart';
import 'package:flutterreduxrad/redux/stub/stub_state.dart';

EntityUIState stubUIReducer(StubUIState state, action) {
  return state.rebuild((b) => b
    ..listUIState.replace(stubListReducer(state.listUIState, action))
    ..selected.replace(editingReducer(state.selected, action))
  );
}

final editingReducer = combineReducers<StubEntity>([
  TypedReducer<StubEntity, SaveStubSuccess>(_updateEditing),
  TypedReducer<StubEntity, AddStubSuccess>(_updateEditing),
  TypedReducer<StubEntity, ViewStub>(_updateEditing),
  TypedReducer<StubEntity, EditStub>(_updateEditing),
  TypedReducer<StubEntity, UpdateStub>(_updateEditing),
]);

/*
StubEntity  _clearEditing(StubEntity stub, action) {
  return StubEntity();
}
*/

StubEntity _updateEditing(StubEntity stub, action) {
  return action.stub;
}

final stubListReducer = combineReducers<ListUIState>([
  TypedReducer<ListUIState, SortStubs>(_sortStubs),
  TypedReducer<ListUIState, SearchStubs>(_searchStubs),
]);

ListUIState _searchStubs(ListUIState stubListState, SearchStubs action) {
  return stubListState.rebuild((b) => b
    ..search = action.search
  );
}

ListUIState _sortStubs(ListUIState stubListState, SortStubs action) {
  return stubListState.rebuild((b) => b
      ..sortAscending = b.sortField != action.field || ! b.sortAscending
      ..sortField = action.field
  );
}


final stubsReducer = combineReducers<StubState>([
  TypedReducer<StubState, SaveStubSuccess>(_updateStub),
  TypedReducer<StubState, AddStubSuccess>(_addStub),
  TypedReducer<StubState, LoadStubsSuccess>(_setLoadedStubs),
  TypedReducer<StubState, LoadStubsFailure>(_setNoStubs),

  TypedReducer<StubState, DeleteStubRequest>(_deleteStubRequest),
  TypedReducer<StubState, DeleteStubSuccess>(_deleteStubSuccess),
  TypedReducer<StubState, DeleteStubFailure>(_deleteStubFailure),
]);

StubState _deleteStubRequest(StubState stubState, DeleteStubRequest action) {
  var stub = stubState.map[action.stubId].rebuild((b) => b
  );

  return stubState.rebuild((b) => b
    ..map[action.stubId] = stub
  );
}

StubState _deleteStubSuccess(StubState stubState, DeleteStubSuccess action) {
  return stubState.rebuild((b) => b
    ..map[action.stub.id] = action.stub
  );
}

StubState _deleteStubFailure(StubState stubState, DeleteStubFailure action) {
  return stubState.rebuild((b) => b
    ..map[action.stub.id] = action.stub
  );
}

StubState _addStub(
    StubState stubState, AddStubSuccess action) {
  return stubState.rebuild((b) => b
    ..map[action.stub.id] = action.stub
    ..list.add(action.stub.id)
  );
}

StubState _updateStub(
    StubState stubState, SaveStubSuccess action) {
  return stubState.rebuild((b) => b
      ..map[action.stub.id] = action.stub
  );
}

StubState _setNoStubs(
    StubState stubState, LoadStubsFailure action) {
  return stubState;
}

StubState _setLoadedStubs(
    StubState stubState, LoadStubsSuccess action) {
  return stubState.rebuild(
    (b) => b
      ..lastUpdated = DateTime.now().millisecondsSinceEpoch
      ..map.addAll(Map.fromIterable(
        action.stubs,
        key: (item) => item.id,
        value: (item) => item,
      ))
      ..list.replace(action.stubs.map(
              (stub) => stub.id).toList())
  );
}
